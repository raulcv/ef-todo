// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ef_todo;

#nullable disable

namespace ef_todo.Migrations
{
    [DbContext(typeof(TodoContext))]
    partial class TodoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ef_todo.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fdbda192-37af-49e1-a125-21a5fa03e3e8"),
                            Name = "Pendant Activities",
                            Weight = 20
                        },
                        new
                        {
                            Id = new Guid("fdbda192-37af-49e1-a125-21a5fa03e302"),
                            Name = "Personal Activities",
                            Weight = 50
                        });
                });

            modelBuilder.Entity("ef_todo.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_at");

                    b.Property<DateTime>("DeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 5, 8, 0, 0, DateTimeKind.Utc))
                        .HasColumnName("Deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Done")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 5, 8, 0, 0, DateTimeKind.Utc))
                        .HasColumnName("Modified_at");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Task", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fdbda192-37af-49e1-a125-21a5fa03e3f4"),
                            CategoryId = new Guid("fdbda192-37af-49e1-a125-21a5fa03e3e8"),
                            CreatedAt = new DateTime(2023, 4, 1, 0, 54, 1, 604, DateTimeKind.Utc).AddTicks(1880),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "I need to go to the post office to get ticket and pay the ammount ehehe",
                            Done = "False",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            Title = "Pay Taxes in Lost country"
                        },
                        new
                        {
                            Id = new Guid("fdbda192-37af-49e1-a125-21a5fa03e3f5"),
                            CategoryId = new Guid("fdbda192-37af-49e1-a125-21a5fa03e302"),
                            CreatedAt = new DateTime(2023, 4, 1, 0, 54, 1, 604, DateTimeKind.Utc).AddTicks(1880),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "I need to 10 kilometers",
                            Done = "False",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            Title = "Go to the Gym"
                        });
                });

            modelBuilder.Entity("ef_todo.Task", b =>
                {
                    b.HasOne("ef_todo.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ef_todo.Category", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
